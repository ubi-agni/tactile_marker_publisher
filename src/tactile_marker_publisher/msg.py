# Software License Agreement (BSD License)
#
# Copyright (c) 2015, CITEC, Bielefeld University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the following
#   disclaimer in the documentation and/or other materials provided
#   with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import string


def _array_eval(field_name, slot_num):
	"""
	Evaluates an index of a named array attribute.
	:param field_name: name of field to index into, ``str``
	:param slot_num: index of slot to return, ``str``
	:returns: fn(msg_field)->msg_field[slot_num]
	"""

	def fn(f):
		return getattr(f, field_name).__getitem__(slot_num)

	return fn


def _field_eval(field_name):
	"""
	Evaluates a named attribute.
	:param field_name: name of field to return, ``str``
	:returns: fn(msg_field)->msg_field.field_name
	"""

	def fn(f):
		return getattr(f, field_name)

	return fn


def generate_field_evals(fields):
	"""
	Given a field specification, generate a list of evaluator functions
	that - applied in series - extracts the given field from a received ROS message.
	:param fields: field specification, e.g. field1.field2[idx].value
	:return:       list of accessor functions (one for each level of hierarchy)
	"""
	try:
		evals = []
		fields = [f for f in fields.split('/') if f]
		for f in fields:
			if '[' in f:
				field_name, rest = f.split('[')
				slot_num = string.atoi(rest[:rest.find(']')])
				evals.append(_array_eval(field_name, slot_num))
			else:
				evals.append(_field_eval(f))
		return evals
	except Exception, e:
		raise Exception("cannot parse field reference [%s]: %s" % (fields, str(e)))


def extract_data(val, field_evals):
	"""
	Extract a field from a ROS message, given the list of evaluator functions
	:param val: original ROS message
	:param field_evals: list of evaluator functions, generated by marker.generate_field_evals()
	:return:
	"""
	if not field_evals:
		return val
	for f in field_evals:
		val = f(val)
	return val
